/**
 * @copyright 2015, Prometheus Research, LLC
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.boxShadow = boxShadow;
exports.insetBoxShadow = insetBoxShadow;
exports.textShadow = textShadow;
exports.rgba = rgba;
exports.rgb = rgb;
exports.border = border;
exports.linearGradient = linearGradient;
exports.transform = transform;
exports.translate3d = translate3d;

var _Utils = require('./Utils');

function keyMirrorDashCase(obj) {
  var result = {};
  for (var key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    result[key] = (0, _Utils.toDashCase)(key);
  }
  return result;
}

function boxShadow(offsetX, offsetY, blurRadius, spreadRadius, color) {
  if (color === none || color === null) {
    return none;
  }
  return offsetX + 'px ' + offsetY + 'px ' + blurRadius + 'px ' + spreadRadius + 'px ' + color;
}

function insetBoxShadow(offsetX, offsetY, blurRadius, spreadRadius, color) {
  if (color === none || color === null) {
    return none;
  }
  return 'inset ' + boxShadow(offsetX, offsetY, blurRadius, spreadRadius, color);
}

function textShadow(offsetX, offsetY, blurRadius, color) {
  if (color === none || color === null) {
    return none;
  }
  return offsetX + 'px ' + offsetY + 'px ' + blurRadius + 'px ' + color;
}

function rgba(r, g, b, a) {
  if (b === undefined && a === undefined) {
    a = g;
    g = r;
    b = r;
  }
  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
}

function rgb(r, g, b) {
  if (g === undefined && b === undefined) {
    g = r;
    b = r;
  }
  return 'rgb(' + r + ', ' + g + ', ' + b + ')';
}

function border(width, style, color) {
  if (color === undefined) {
    color = style;
    style = border.solid;
  }
  if (color === none || color === null) {
    return none;
  }
  return width + 'px ' + style + ' ' + color;
}

border.solid = 'solid';

function linearGradient(direction) {
  for (var _len = arguments.length, colorStops = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    colorStops[_key - 1] = arguments[_key];
  }

  colorStops = colorStops.map(function (p) {
    return (0, _Utils.isString)(p) ? p : p.color + ' ' + p.value;
  }).join(', ');
  return 'linear-gradient(' + direction + ', ' + colorStops + ')';
}

function transform(duration) {
  return 'transform ' + duration + 's';
}

function translate3d(x, y, z) {
  return 'translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)';
}

function sizeSeq() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return args.map(function (arg) {
    return (0, _Utils.isString)(arg) ? arg : arg + 'px';
  }).join(' ');
}

var padding = sizeSeq;
exports.padding = padding;
var margin = sizeSeq;

exports.margin = margin;
var position = keyMirrorDashCase({
  absolute: true,
  relative: true,
  fixed: true
});

exports.position = position;
var display = keyMirrorDashCase({
  block: true,
  inlineBlock: true,
  flex: true,
  inlineFlex: true,
  inline: true
});

exports.display = display;
var cursor = keyMirrorDashCase({
  pointer: true,
  'default': true
});

exports.cursor = cursor;
var overflow = keyMirrorDashCase({
  auto: true,
  hidden: true,
  scroll: true
});

exports.overflow = overflow;
var textAlign = keyMirrorDashCase({
  center: true,
  left: true,
  right: true
});

exports.textAlign = textAlign;
var verticalAlign = keyMirrorDashCase({
  middle: true,
  baseline: true,
  sub: true,
  'super': true,
  top: true,
  bottom: true
});

exports.verticalAlign = verticalAlign;
var fontWeight = keyMirrorDashCase({
  bold: true,
  normal: true
});

exports.fontWeight = fontWeight;
var touchAction = keyMirrorDashCase({
  manipulation: true
});

exports.touchAction = touchAction;
var none = 'none';

exports.none = none;
var auto = 'auto';

exports.auto = auto;
var whiteSpace = keyMirrorDashCase({
  nowrap: true
});

exports.whiteSpace = whiteSpace;
var textDecoration = keyMirrorDashCase({
  none: true,
  underline: true
});

exports.textDecoration = textDecoration;
var textOverflow = keyMirrorDashCase({
  ellipsis: true
});

exports.textOverflow = textOverflow;
var color = keyMirrorDashCase({
  transparent: true
});
exports.color = color;
